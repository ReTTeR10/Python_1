__author__ = 'Мишин Егор Олегович'

# Задание-1: уравнение прямой вида y = kx + b задано в виде строки.
# Определить координату y точки с заданной координатой x.

# вычислите и выведите y

print("\n Задача №1")

equation = 'y = -12x + 11111140.2121'   # Сюда можно подставить соответственно любое уравнение вида y = kx + b или - b
x = 2.5

print('Уравнение :\n', equation, '\n x = ', x)
if '+' in equation:
    y = float(equation[equation.find('=') + 1:equation.find('x')]) * x + float(equation[equation.find('+') + 1:])
else:                       # решение, если y = kx - b
    y = float(equation[equation.find('=') + 1:equation.find('x')]) * x - float(equation[equation.find('- ') + 1:])
print('\n y = ', y)



# Задание-2: Дата задана в виде строки формата 'dd.mm.yyyy'.
# Проверить, корректно ли введена дата.
# Условия корректности:
# 1. День должен приводиться к целому числу в диапазоне от 1 до 30(31)
#  (в зависимости от месяца, февраль не учитываем)
# 2. Месяц должен приводиться к целому числу в диапазоне от 1 до 12
# 3. Год должен приводиться к целому положительному числу в диапазоне от 1 до 9999
# 4. Длина исходной строки для частей должна быть в соответствии с форматом
#  (т.е. 2 символа для дня, 2 - для месяца, 4 - для года)

# Пример корректной даты
date = '01.11.1185'

# Примеры некорректных дат
# date = '01.22.1001'
# date = '1.12.1001'
# date = '-2.10.3001'
print('\n Задача 2')

import sys


date = '01.11.1185'



count = 0


if int(date[0:2]) in range(1, 31):
    count += 1
    day = int(date[0:2])
else:
    print('Неправильный формат даты, проверьте день')
    sys.exit()
if int(date[3:5]) in range(1, 12):
    month = date[3:5]
    count += 1
    if month == 2 | 4 | 6 | 9 | 11:
        if day != 31:
            count += 1
            print("!!!2")
        else:
            print('Неправильный формат даты, проверьте день')
            sys.exit()
    else:
        pass
else:
    pass
if count == 0:
    print('Неправильный формат датыБ проверьте день/месяц')
    sys.exit()
else:
    pass
if int(date[6:]) in range(1, 10000):
    if len(date[6:]) == 4:
        count += 1
    else:
        pass
if count == 0:
    print('Неправильный формат датыБ проверьте день/месяц')
    sys.exit()
else:
    pass
print('\ncount =', count)
if count == 3:
    print('Дата корректна')
else:
    print('Дата введена некорректно')












# Задание-3: "Перевёрнутая башня" (Задача олимпиадного уровня)
#
# Вавилонцы решили построить удивительную башню —
# расширяющуюся к верху и содержащую бесконечное число этажей и комнат.
# Она устроена следующим образом — на первом этаже одна комната,
# затем идет два этажа, на каждом из которых по две комнаты,
# затем идёт три этажа, на каждом из которых по три комнаты и так далее:
#         ...
#     12  13  14
#     9   10  11
#     6   7   8
#       4   5
#       2   3
#         1
#
# Эту башню решили оборудовать лифтом --- и вот задача:
# нужно научиться по номеру комнаты определять,
# на каком этаже она находится и какая она по счету слева на этом этаже.
#
# Входные данные: В первой строчке задан номер комнаты N, 1 ≤ N ≤ 2 000 000 000.
#
# Выходные данные:  Два целых числа — номер этажа и порядковый номер слева на этаже.
#
# Пример:
# Вход: 13
# Выход: 6 2
#
# Вход: 11
# Выход: 5 3

print('\n Задача 3')


# N = 1789995
#
# base_house = [['room']*x for x in range(99) for y in range(x)]
#
# house = [list(enumerate(base_house, start=(i+1))) for
#          i in range(1)][0]
#
# room = 1
# for floor in house:
#     for i in range(len(floor[1])):
#         floor[1].remove('room')
#         floor[1].append(room)
#         room += 1
#
# for floor in house:
#     for rooms in floor[1]:
#         if rooms == N:
#             print('Квартира № %s\nЭтаж %s, %s-я слева' %
#                   (N, floor[0], floor[1].index(N) + 1))

room = int(input('Введите номер комнаты: '))


box = 0                                  # Начинаем с нуля, чтобы не пропустить первый квадрат
pos = 1                                  # Позиция ячейки в одномерной последовательности
etage = 1                                # Номер этажа

while (pos + (box * box)) <= room:       # Идём по квадратам, ищем нужный
    pos += (box * box)                   # хранит номер первой ячейки в текущем квадрате
    etage += box                         # Счётчик столбцов прирастает на число этих столбцов в квадрате
    box += 1                             # Квадраты считаются по одному


onetage = 1                              # Храним приращение номера столбца внутри текущего квадрата
while (pos + (onetage * box)) <= room:
    pos += onetage * box                 # хранит номер первой ячейки в текущем столбце
    onetage += 1                         # Увеличиваем приращение
etage += onetage - 1                     # Регистрируем найденный столбец


place = 1                                # Храним приращение номера ячейки в текущем столбце
while (pos + place) <= room:
    place += 1
pos += place + 1


print('\tEtage:\t%s\n\tPlace:\t%s' % (etage, place))


